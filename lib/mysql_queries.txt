create database abm_pharma_rev2;

use abm_pharma_rev2;

create table security(sec_id int, password varchar(16), role varchar(3));
insert into security values(0, 'admin', 'adm');
insert into security values(1, 'employee', 'emp');

create table products(prod_id int, item_id int, pack_id int, price_id int, rem_id int, prod_condition varchar(9));

create table item(item_id int, item_no varchar(8 ), description varchar(64), lot_no varchar(8 ), date_added date, exp_date date, brand varchar(32));

create table packaging(pack_id int, qty int, size int, uom_id varchar(16), parentPack_id int, pack_line varchar(10), pack_group int);

create table uom(uom_id varchar(16), name varchar(16), size int, subUom_id varchar(16));

create table pricing(price_id int, cost decimal(12,2), unit_price decimal(12,2), discount varchar(4), unit_amount decimal(12,2));

create table remarks(rem_id int, rem_date Date, rem_time Time, details varchar(128));

create table counter(counter_no int, active_time time, counter_state varchar(5), currentCart_no int);
insert into counter values(	0, '00:00:00', 'CLOSE', 0);
insert into counter values( 1, '00:00:00', 'OPEN' , 0);
insert into counter values( 2, '00:00:00', 'OPEN' , 0);
insert into counter values( 3, '00:00:00', 'OPEN' , 0);
insert into counter values( 4, '00:00:00', 'OPEN' , 0);
insert into counter values( 5, '00:00:00', 'OPEN' , 0);
insert into counter values( 6, '00:00:00', 'OPEN' , 0);
insert into counter values( 7, '00:00:00', 'OPEN' , 0);
insert into counter values( 8, '00:00:00', 'OPEN' , 0);
insert into counter values( 9, '00:00:00', 'OPEN' , 0);
insert into counter values(10, '00:00:00', 'OPEN' , 0);
insert into counter values(11, '00:00:00', 'OPEN' , 0);
insert into counter values(12, '00:00:00', 'OPEN' , 0);
insert into counter values(13, '00:00:00', 'OPEN' , 0);
insert into counter values(14, '00:00:00', 'OPEN' , 0);
insert into counter values(15, '00:00:00', 'OPEN' , 0);

create table cart(cart_no int, counter_no int, order_no int);
insert into cart values(0, 0, 0);
insert into cart values(0, 1, 1);
insert into cart values(0, 2, 2);
insert into cart values(0, 3, 3);
insert into cart values(0, 4, 4);
insert into cart values(0, 5, 5);
insert into cart values(0, 6, 6);
insert into cart values(0, 7, 7);
insert into cart values(0, 8, 8);
insert into cart values(0, 9, 9);
insert into cart values(0, 10, 10);
insert into cart values(0, 11, 11);
insert into cart values(0, 12, 12);
insert into cart values(0, 13, 13);
insert into cart values(0, 14, 14);
insert into cart values(0, 15, 15);

create table orders(order_no int, prod_id int, net_amount decimal(12,2));

create table transactions(trans_id int, counter_no int, cart_no int, cust_id int, tin_no varchar(16), transaction_date date, terms varchar(32), cost_amount decimal(12,2), discount varchar(4), total_netAmount decimal(12,2), profit decimal(12,2));

create table customers(cust_id int, customer_name varchar(64), address varchar(64), contact_no varchar(64), e_mail varchar(64), company varchar(64), customer_state varchar(8));

-----Manual Checking-----
select * from products;
select * from item;
select * from packaging;
select * from uom;
select * from pricing;
select * from remarks;
select * from cart;
select * from orders;
select * from transactions;
select * from customers;
select * from counter;

-----Manual Reset-------
delete from products;
delete from item;
delete from packaging;
delete from uom;
delete from pricing;
delete from remarks;
delete from orders;
delete from transactions;
delete from customers;
update counter set counter_state='OPEN', currentCart_no=0 where counter_no>=0;
delete from cart where cart_no!=0;

-----Manual Dropping-----
drop database abm_pharma_rev2;

drop table products;
drop table item;
drop table packaging;
drop table uom;
drop table pricing;
drop table remarks;
drop table counter;
drop table cart;
drop table orders;
drop table transactions;
drop table customers;

-----sample queries-----
 1. Sample products:
 INSERT INTO ITEM (item_id, item_no, description, lot_no, date_added, exp_date, brand) VALUES
    (0, '0000', 'sample0', '0000', '2024-12-13', '2025-12-13', 'XXXX'),
    (1, '1000', 'sample1', '0001', '2024-12-13', '2025-12-13', 'YYYY'),
    (2, '2000', 'sample2', '0002', '2024-12-13', '2025-12-13', 'ZZZZ');
    
 INSERT INTO PACKAGING (pack_id, qty, size, uom_id, parentPack_id) VALUES
    (0, 100, 100, 0, -1),
    (1, 50, 50, 1, -1),
    (2, 150, 150, 2, -1);
    
 INSERT INTO UOM (uom_id, name, size, subUom_id) VALUES
    (0, 'box', 1, -1),
    (1, 'pieces', 1, -1),
    (2, 'sachet', 1, -1);
    
 INSERT INTO PRICING (price_id, cost, unit_price, discount, unit_amount) VALUES
    (0, 1000.00, 1200.00, '10%', 1080.00),
    (1, 500.00, 600.00, '5%', 570.00),
    (2, 300.00, 350.00, '2%', 346.50);

 INSERT INTO PRODUCTS (prod_id, item_id, pack_id, price_id, rem_id, prod_condition) VALUES
 	(0, 0, 0, 0, -1,'STORED'),
    (1, 1, 1, 1, -1,'STORED'),
    (2, 2, 2, 2, -1, 'STORED');


-----sample queries-----

1.) getting all items from inventory:
select 
	a.item_no, 
	a.description, 
	a.lot_no, 
	a.date_added, 
	a.exp_date, 
	a.brand, 
	b.qty, 
	c.name, 
	d.cost, 
	d.unit_price, 
	d.discount, 
	d.unit_amount
from
	items as a  
	join 
	packaging as b 
	join 
	uom as c 
	join 
	pricing as d 
	join 
	remarks as r
	join
	inventory as e 
on
	e.item_id = a.item_id and 
	e.pack_id = b.pack_id and b.uom_id = c.uom_id and 
	e.price_id = d.price_id and
	e.rem_id = r.rem_id;
	
2.
select 
	p.pack_id, 
	p.qty,
	p.size,
	p.uom_id,
	p.parentPack_id
from 
	packaging p join inventory i 
where 
	p.parentPack_id=1 
	and 
	(
		i.item_condition='STORED' 
		or 
		i.item_condition='ARCHIVED' 
	);
	
3.
select 
	*
from 
	packaging p inner join inventory i 
on 
	p.pack_id=i.pack_id
where
	p.parentPack_id=1
	and 
	(
		i.item_condition='STORED' 
		or 
		i.item_condition='ARCHIVED' 
	);
	
4. search products
select 
	p.prod_id,
	i.item_no, 
	i.description, 
	i.lot_no, 
	i.date_added, 
	i.exp_date, 
	i.brand, 
	k.qty, 
	u.name, 
	s.cost, 
	s.unit_price, 
	s.discount, 
	s.unit_amount
from
	products as p
	join
	item as i
	join 
	packaging as k 
	join
	uom as u
	join 
	pricing as s 
	join 
	remarks as r
on
	p.item_id = i.item_id and 
	p.pack_id = k.pack_id and k.uom_id = u.uom_id and
	p.price_id = s.price_id
	
where
	p.prod_condition='STORED' and u.name like '%o%';

5. search from Transactions
select 
	o.prod_id
from
	transactions as t
	join
	customer as m
on
	t.cust_id = m.cust_id
where
	t.trans_id=1 and i.exp_date like '%2026%';
	
	
6. search from orders
select 
	o.prod_id
from
	transactions as t
	join
	cart as c
	join
	orders as o 
	join
	products as p
	join
	item as i
	join 
	packaging as k 
	join
	uom as u
	join 
	pricing as s 
	join 
	remarks as r
on
	t.cart_no = c.cart_no and
	c.order_no = o.order_no and
	o.prod_id = p.prod_id and

	p.item_id = i.item_id and 
	p.pack_id = k.pack_id and k.uom_id = u.uom_id and
	p.price_id = s.price_id
	
where
	t.trans_id=1 and i.exp_date like '%2026%';
	